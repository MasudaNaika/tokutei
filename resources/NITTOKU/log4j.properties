#
# 特定健康診査システム　ログ情報定義ファイル
#
# 変更履歴
#	2009/05/13 設定の見直し
#

######################################################################################
### ログローテート(FileSize10MBまで5Fileまで保持する場合の設定)
######################################################################################
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=${user.dir}/Log/JKenshinSoftware.log
log4j.appender.file.Append=true
log4j.appender.file.MaxFileSize=1MB
log4j.appender.file.MaxBackupIndex=3
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d %5p %c{1} - %L行%m%n
log4j.rootLogger=debug, file

######################################################################################
### ログ情報定義ファイル解説(設定例)
######################################################################################
#
# ○ローテート形式
# log4j.appender.file=org.apache.log4j.RollingFileAppender
# 
# ○ログ出力場所
# log4j.appender.file.File=${user.dir}/Log/TestLog4j.log
# ※${user.dir}はNITTOKUフォルダを示す
#
# ○追加モード
# log4j.appender.file.Append=true
# ※追加モードか否かを指定する boolean 値（trueかfalse）である。
#   falseを指定した場合、起動のたびごとにファイルを更新
#
# ○最大ファイルサイズ指定(ローテート形式)
# log4j.appender.file.MaxFileSize=10M
#
# ○ローテート(ローテート数指定)
# log4j.appender.file.MaxBackupIndex=3
#
# ○パターンレイアウト
# log4j.appender.file.layout=org.apache.log4j.PatternLayout
# ※パターン文字列で指定したフォーマットに従い、ログが出力されます。
#
# ○（パターンレイアウト）
# log4j.appender.file.layout.ConversionPattern=%d %5p %c{1} - %L行%m%n
# ※変換パターン使用文字列一覧参照
#
# ○ルートロガーの定義
# log4j.rootLogger=debug, file
# ※ログレベル,適用するAppenderの名前[, Appender名]
#
######################################################################################
### 変換パターン使用文字列一覧
######################################################################################
#
# 記号	説明
#--------------------------------------------------------------------------------------
# %c	ログイベントのカテゴリー名を出力する。
# %C	ロギング要求を行うクラス名を出力する。
# %d	ログイベントの日時を出力する。
# %d{HH:mm:ss} や %d{dd MMM yyyy HH}として、より柔軟に日時情報を出力することが出来る。
# %F(*)	ログ要求が発生したファイル名を出力する。
# %l(*)	ログが生成されたときに呼び出された位置（ソース名、行）を出力する。
# %L(*)	ロギング要求を行なった行番号を出力する。
# %m	ロギングイベントで設定されたメッセージを出力する。
# %M(*)	ログ要求が行なわれたメソッド名を出力する。
# %n	プラットフォーム依存の改行文字を出力する。
# %p	ログの優先度を出力します。
# %r	アプリケーションが開始してから、ログが出力されるまでの時間をミリ秒単位で出力する。
# %t	ログを生成したスレッドの名前を出力する。
# %x	ログが生成されたスレッドのNDC(ネスト化診断コンテキスト) を出力する。
# %%	%を出力する。
# (*) これらを出力するときのパフォーマンスは良くないため、アプリケーションの実行速度
#     が問題にならない場合にのみ使用することが推奨されている。